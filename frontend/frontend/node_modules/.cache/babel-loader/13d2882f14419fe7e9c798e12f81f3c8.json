{"ast":null,"code":"import { progress } from './progress.mjs';\nimport { mix } from './mix.mjs';\nimport { mixColor } from './mix-color.mjs';\nimport { mixComplex, mixArray, mixObject } from './mix-complex.mjs';\nimport { color } from 'style-value-types';\nimport { clamp } from './clamp.mjs';\nimport { pipe } from './pipe.mjs';\nimport { invariant } from 'hey-listen';\n\nconst mixNumber = (from, to) => p => mix(from, to, p);\n\nfunction detectMixerFactory(v) {\n  if (typeof v === 'number') {\n    return mixNumber;\n  } else if (typeof v === 'string') {\n    if (color.test(v)) {\n      return mixColor;\n    } else {\n      return mixComplex;\n    }\n  } else if (Array.isArray(v)) {\n    return mixArray;\n  } else if (typeof v === 'object') {\n    return mixObject;\n  }\n}\n\nfunction createMixers(output, ease, customMixer) {\n  const mixers = [];\n  const mixerFactory = customMixer || detectMixerFactory(output[0]);\n  const numMixers = output.length - 1;\n\n  for (let i = 0; i < numMixers; i++) {\n    let mixer = mixerFactory(output[i], output[i + 1]);\n\n    if (ease) {\n      const easingFunction = Array.isArray(ease) ? ease[i] : ease;\n      mixer = pipe(easingFunction, mixer);\n    }\n\n    mixers.push(mixer);\n  }\n\n  return mixers;\n}\n\nfunction fastInterpolate(_ref, _ref2) {\n  let [from, to] = _ref;\n  let [mixer] = _ref2;\n  return v => mixer(progress(from, to, v));\n}\n\nfunction slowInterpolate(input, mixers) {\n  const inputLength = input.length;\n  const lastInputIndex = inputLength - 1;\n  return v => {\n    let mixerIndex = 0;\n    let foundMixerIndex = false;\n\n    if (v <= input[0]) {\n      foundMixerIndex = true;\n    } else if (v >= input[lastInputIndex]) {\n      mixerIndex = lastInputIndex - 1;\n      foundMixerIndex = true;\n    }\n\n    if (!foundMixerIndex) {\n      let i = 1;\n\n      for (; i < inputLength; i++) {\n        if (input[i] > v || i === lastInputIndex) {\n          break;\n        }\n      }\n\n      mixerIndex = i - 1;\n    }\n\n    const progressInRange = progress(input[mixerIndex], input[mixerIndex + 1], v);\n    return mixers[mixerIndex](progressInRange);\n  };\n}\n\nfunction interpolate(input, output) {\n  let {\n    clamp: isClamp = true,\n    ease,\n    mixer\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const inputLength = input.length;\n  invariant(inputLength === output.length, 'Both input and output ranges must be the same length');\n  invariant(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, 'Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.');\n\n  if (input[0] > input[inputLength - 1]) {\n    input = [].concat(input);\n    output = [].concat(output);\n    input.reverse();\n    output.reverse();\n  }\n\n  const mixers = createMixers(output, ease, mixer);\n  const interpolator = inputLength === 2 ? fastInterpolate(input, mixers) : slowInterpolate(input, mixers);\n  return isClamp ? v => interpolator(clamp(input[0], input[inputLength - 1], v)) : interpolator;\n}\n\nexport { interpolate };","map":{"version":3,"sources":["/Users/aditummala/Desktop/group13-1/frontend/frontend/node_modules/popmotion/dist/es/utils/interpolate.mjs"],"names":["progress","mix","mixColor","mixComplex","mixArray","mixObject","color","clamp","pipe","invariant","mixNumber","from","to","p","detectMixerFactory","v","test","Array","isArray","createMixers","output","ease","customMixer","mixers","mixerFactory","numMixers","length","i","mixer","easingFunction","push","fastInterpolate","slowInterpolate","input","inputLength","lastInputIndex","mixerIndex","foundMixerIndex","progressInRange","interpolate","isClamp","concat","reverse","interpolator"],"mappings":"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","sourcesContent":["import { progress } from './progress.mjs';\nimport { mix } from './mix.mjs';\nimport { mixColor } from './mix-color.mjs';\nimport { mixComplex, mixArray, mixObject } from './mix-complex.mjs';\nimport { color } from 'style-value-types';\nimport { clamp } from './clamp.mjs';\nimport { pipe } from './pipe.mjs';\nimport { invariant } from 'hey-listen';\n\nconst mixNumber = (from, to) => (p) => mix(from, to, p);\nfunction detectMixerFactory(v) {\n    if (typeof v === 'number') {\n        return mixNumber;\n    }\n    else if (typeof v === 'string') {\n        if (color.test(v)) {\n            return mixColor;\n        }\n        else {\n            return mixComplex;\n        }\n    }\n    else if (Array.isArray(v)) {\n        return mixArray;\n    }\n    else if (typeof v === 'object') {\n        return mixObject;\n    }\n}\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || detectMixerFactory(output[0]);\n    const numMixers = output.length - 1;\n    for (let i = 0; i < numMixers; i++) {\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\nfunction fastInterpolate([from, to], [mixer]) {\n    return (v) => mixer(progress(from, to, v));\n}\nfunction slowInterpolate(input, mixers) {\n    const inputLength = input.length;\n    const lastInputIndex = inputLength - 1;\n    return (v) => {\n        let mixerIndex = 0;\n        let foundMixerIndex = false;\n        if (v <= input[0]) {\n            foundMixerIndex = true;\n        }\n        else if (v >= input[lastInputIndex]) {\n            mixerIndex = lastInputIndex - 1;\n            foundMixerIndex = true;\n        }\n        if (!foundMixerIndex) {\n            let i = 1;\n            for (; i < inputLength; i++) {\n                if (input[i] > v || i === lastInputIndex) {\n                    break;\n                }\n            }\n            mixerIndex = i - 1;\n        }\n        const progressInRange = progress(input[mixerIndex], input[mixerIndex + 1], v);\n        return mixers[mixerIndex](progressInRange);\n    };\n}\nfunction interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    invariant(inputLength === output.length, 'Both input and output ranges must be the same length');\n    invariant(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, 'Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.');\n    if (input[0] > input[inputLength - 1]) {\n        input = [].concat(input);\n        output = [].concat(output);\n        input.reverse();\n        output.reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const interpolator = inputLength === 2\n        ? fastInterpolate(input, mixers)\n        : slowInterpolate(input, mixers);\n    return isClamp\n        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))\n        : interpolator;\n}\n\nexport { interpolate };\n"]},"metadata":{},"sourceType":"module"}