{"ast":null,"code":"import { color } from '../color/index.mjs';\nimport { number } from '../numbers/index.mjs';\nimport { isString, floatRegex, colorRegex, sanitize } from '../utils.mjs';\nconst colorToken = '${c}';\nconst numberToken = '${n}';\n\nfunction test(v) {\n  var _a, _b, _c, _d;\n\n  return isNaN(v) && isString(v) && ((_b = (_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = v.match(colorRegex)) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0;\n}\n\nfunction analyse(v) {\n  if (typeof v === 'number') v = `${v}`;\n  const values = [];\n  let numColors = 0;\n  const colors = v.match(colorRegex);\n\n  if (colors) {\n    numColors = colors.length;\n    v = v.replace(colorRegex, colorToken);\n    values.push(...colors.map(color.parse));\n  }\n\n  const numbers = v.match(floatRegex);\n\n  if (numbers) {\n    v = v.replace(floatRegex, numberToken);\n    values.push(...numbers.map(number.parse));\n  }\n\n  return {\n    values,\n    numColors,\n    tokenised: v\n  };\n}\n\nfunction parse(v) {\n  return analyse(v).values;\n}\n\nfunction createTransformer(v) {\n  const {\n    values,\n    numColors,\n    tokenised\n  } = analyse(v);\n  const numValues = values.length;\n  return v => {\n    let output = tokenised;\n\n    for (let i = 0; i < numValues; i++) {\n      output = output.replace(i < numColors ? colorToken : numberToken, i < numColors ? color.transform(v[i]) : sanitize(v[i]));\n    }\n\n    return output;\n  };\n}\n\nconst convertNumbersToZero = v => typeof v === 'number' ? 0 : v;\n\nfunction getAnimatableNone(v) {\n  const parsed = parse(v);\n  const transformer = createTransformer(v);\n  return transformer(parsed.map(convertNumbersToZero));\n}\n\nconst complex = {\n  test,\n  parse,\n  createTransformer,\n  getAnimatableNone\n};\nexport { complex };","map":{"version":3,"sources":["C:/kai/Cal/Fullstack/group13/frontend/frontend/node_modules/style-value-types/dist/es/complex/index.mjs"],"names":["color","number","isString","floatRegex","colorRegex","sanitize","colorToken","numberToken","test","v","_a","_b","_c","_d","isNaN","match","length","analyse","values","numColors","colors","replace","push","map","parse","numbers","tokenised","createTransformer","numValues","output","i","transform","convertNumbersToZero","getAnimatableNone","parsed","transformer","complex"],"mappings":"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","sourcesContent":["import { color } from '../color/index.mjs';\nimport { number } from '../numbers/index.mjs';\nimport { isString, floatRegex, colorRegex, sanitize } from '../utils.mjs';\n\nconst colorToken = '${c}';\nconst numberToken = '${n}';\nfunction test(v) {\n    var _a, _b, _c, _d;\n    return (isNaN(v) &&\n        isString(v) &&\n        ((_b = (_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = v.match(colorRegex)) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0);\n}\nfunction analyse(v) {\n    if (typeof v === 'number')\n        v = `${v}`;\n    const values = [];\n    let numColors = 0;\n    const colors = v.match(colorRegex);\n    if (colors) {\n        numColors = colors.length;\n        v = v.replace(colorRegex, colorToken);\n        values.push(...colors.map(color.parse));\n    }\n    const numbers = v.match(floatRegex);\n    if (numbers) {\n        v = v.replace(floatRegex, numberToken);\n        values.push(...numbers.map(number.parse));\n    }\n    return { values, numColors, tokenised: v };\n}\nfunction parse(v) {\n    return analyse(v).values;\n}\nfunction createTransformer(v) {\n    const { values, numColors, tokenised } = analyse(v);\n    const numValues = values.length;\n    return (v) => {\n        let output = tokenised;\n        for (let i = 0; i < numValues; i++) {\n            output = output.replace(i < numColors ? colorToken : numberToken, i < numColors ? color.transform(v[i]) : sanitize(v[i]));\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === 'number' ? 0 : v;\nfunction getAnimatableNone(v) {\n    const parsed = parse(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = { test, parse, createTransformer, getAnimatableNone };\n\nexport { complex };\n"]},"metadata":{},"sourceType":"module"}