{"ast":null,"code":"import { useEnvironment } from '@chakra-ui/react-env';\nimport { noop, isBrowser, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar classNames = {\n  light: \"chakra-ui-light\",\n  dark: \"chakra-ui-dark\"\n};\n/**\n * SSR: Graceful fallback for the `body` element\n */\n\nvar mockBody = {\n  classList: {\n    add: noop,\n    remove: noop\n  }\n};\n\nvar getBody = function getBody(document) {\n  return isBrowser ? document.body : mockBody;\n};\n/**\n * Function to add/remove class from `body` based on color mode\n */\n\n\nfunction syncBodyClassName(isDark, document) {\n  var body = getBody(document);\n  body.classList.add(isDark ? classNames.dark : classNames.light);\n  body.classList.remove(isDark ? classNames.light : classNames.dark);\n}\n/**\n * Check if JS media query matches the query string passed\n */\n\n\nfunction getMediaQuery(query) {\n  var mediaQueryList = window.matchMedia == null ? void 0 : window.matchMedia(query);\n\n  if (!mediaQueryList) {\n    return undefined;\n  }\n\n  return !!mediaQueryList.media === mediaQueryList.matches;\n}\n\nvar queries = {\n  light: \"(prefers-color-scheme: light)\",\n  dark: \"(prefers-color-scheme: dark)\"\n};\n\nfunction getColorScheme(fallback) {\n  var _getMediaQuery;\n\n  var isDark = (_getMediaQuery = getMediaQuery(queries.dark)) != null ? _getMediaQuery : fallback === \"dark\";\n  return isDark ? \"dark\" : \"light\";\n}\n/**\n * Adds system os color mode listener, and run the callback\n * once preference changes\n */\n\n\nfunction addListener(fn) {\n  if (!(\"matchMedia\" in window)) {\n    return noop;\n  }\n\n  var mediaQueryList = window.matchMedia(queries.dark);\n\n  var listener = function listener() {\n    fn(mediaQueryList.matches ? \"dark\" : \"light\", true);\n  };\n\n  mediaQueryList.addEventListener(\"change\", listener);\n  return function () {\n    mediaQueryList.removeEventListener(\"change\", listener);\n  };\n}\n\nvar root = {\n  get: function get() {\n    return document.documentElement.style.getPropertyValue(\"--chakra-ui-color-mode\") || document.documentElement.dataset.theme;\n  },\n  set: function set(mode) {\n    if (isBrowser) {\n      /**\n       * @deprecated\n       * The CSS variable `--chakra-ui-color-mode` will be removed in the next major release\n       * Please use the `data-theme` attribute to determine the current color mode\n       */\n      document.documentElement.style.setProperty(\"--chakra-ui-color-mode\", mode);\n      document.documentElement.setAttribute(\"data-theme\", mode);\n    }\n  }\n};\n\nvar hasSupport = function hasSupport() {\n  return typeof Storage !== \"undefined\";\n};\n\nvar storageKey = \"chakra-ui-color-mode\";\n/**\n * Simple object to handle read-write to localStorage\n */\n\nvar localStorageManager = {\n  get: function get(init) {\n    if (!hasSupport()) return init;\n\n    try {\n      var _value = localStorage.getItem(storageKey);\n\n      return _value != null ? _value : init;\n    } catch (error) {\n      if (__DEV__) {\n        console.log(error);\n      }\n\n      return init;\n    }\n  },\n  set: function set(value) {\n    if (!hasSupport()) return;\n\n    try {\n      localStorage.setItem(storageKey, value);\n    } catch (error) {\n      if (__DEV__) {\n        console.log(error);\n      }\n    }\n  },\n  type: \"localStorage\"\n};\n/**\n * Simple object to handle read-write to cookies\n */\n\nvar cookieStorageManager = function cookieStorageManager(cookies) {\n  if (cookies === void 0) {\n    cookies = \"\";\n  }\n\n  return {\n    get: function get(init) {\n      var match = cookies.match(new RegExp(\"(^| )\" + storageKey + \"=([^;]+)\"));\n\n      if (match) {\n        return match[2];\n      }\n\n      return init;\n    },\n    set: function set(value) {\n      document.cookie = storageKey + \"=\" + value + \"; max-age=31536000; path=/\";\n    },\n    type: \"cookie\"\n  };\n};\n\nvar ColorModeContext = /*#__PURE__*/React.createContext({});\n\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\";\n}\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\n\n\nvar useColorMode = function useColorMode() {\n  var context = React.useContext(ColorModeContext);\n\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n\n  return context;\n};\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\n\n\nfunction ColorModeProvider(props) {\n  var value = props.value,\n      children = props.children,\n      _props$options = props.options,\n      useSystemColorMode = _props$options.useSystemColorMode,\n      initialColorMode = _props$options.initialColorMode,\n      _props$colorModeManag = props.colorModeManager,\n      colorModeManager = _props$colorModeManag === void 0 ? localStorageManager : _props$colorModeManag;\n  var defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  /**\n   * Only attempt to retrieve if we're on the server. Else this will result\n   * in a hydration mismatch warning and partially invalid visuals.\n   *\n   * Else fallback safely to `theme.config.initialColormode` (default light)\n   */\n\n  var _React$useState = React.useState(colorModeManager.type === \"cookie\" ? colorModeManager.get(defaultColorMode) : defaultColorMode),\n      colorMode = _React$useState[0],\n      rawSetColorMode = _React$useState[1];\n\n  var _useEnvironment = useEnvironment(),\n      document = _useEnvironment.document;\n\n  React.useEffect(function () {\n    /**\n     * Since we cannot initially retrieve localStorage for the reasons mentioned\n     * above, do so after hydration.\n     *\n     * Priority:\n     * - if `useSystemColorMode` is true system-color will be used as default - initial\n     * colormode is the fallback if system color mode isn't resolved\n     *\n     * - if `--chakra-ui-color-mode` is defined through e.g. `ColorModeScript` this\n     * will be used\n     *\n     * - if `colorModeManager` = `localStorage` and a value is defined for\n     * `chakra-ui-color-mode` this will be used\n     *\n     * - if `initialColorMode` = `system` system-color will be used as default -\n     * initial colormode is the fallback if system color mode isn't resolved\n     *\n     * - if `initialColorMode` = `'light'|'dark'` the corresponding value will be used\n     */\n    if (isBrowser && colorModeManager.type === \"localStorage\") {\n      var systemColorWithFallback = getColorScheme(defaultColorMode);\n\n      if (useSystemColorMode) {\n        return rawSetColorMode(systemColorWithFallback);\n      }\n\n      var rootGet = root.get();\n      var colorManagerGet = colorModeManager.get();\n\n      if (rootGet) {\n        return rawSetColorMode(rootGet);\n      }\n\n      if (colorManagerGet) {\n        return rawSetColorMode(colorManagerGet);\n      }\n\n      if (initialColorMode === \"system\") {\n        return rawSetColorMode(systemColorWithFallback);\n      }\n\n      return rawSetColorMode(defaultColorMode);\n    }\n  }, [colorModeManager, useSystemColorMode, defaultColorMode, initialColorMode]);\n  React.useEffect(function () {\n    var isDark = colorMode === \"dark\";\n    syncBodyClassName(isDark, document);\n    root.set(isDark ? \"dark\" : \"light\");\n  }, [colorMode, document]);\n  var setColorMode = React.useCallback(function (value, isListenerEvent) {\n    if (isListenerEvent === void 0) {\n      isListenerEvent = false;\n    }\n\n    if (!isListenerEvent) {\n      colorModeManager.set(value);\n    } else if (colorModeManager.get() && !useSystemColorMode) return;\n\n    rawSetColorMode(value);\n  }, [colorModeManager, useSystemColorMode]);\n  var toggleColorMode = React.useCallback(function () {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\");\n  }, [colorMode, setColorMode]);\n  React.useEffect(function () {\n    var shouldUseSystemListener = useSystemColorMode || initialColorMode === \"system\";\n    var removeListener;\n\n    if (shouldUseSystemListener) {\n      removeListener = addListener(setColorMode);\n    }\n\n    return function () {\n      if (removeListener && shouldUseSystemListener) {\n        removeListener();\n      }\n    };\n  }, [setColorMode, useSystemColorMode, initialColorMode]); // presence of `value` indicates a controlled context\n\n  var context = React.useMemo(function () {\n    return {\n      colorMode: value != null ? value : colorMode,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode\n    };\n  }, [colorMode, setColorMode, toggleColorMode, value]);\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n    value: context\n  }, children);\n}\n\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\";\n}\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\n\n\nvar DarkMode = function DarkMode(props) {\n  var context = React.useMemo(function () {\n    return {\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n    value: context\n  }, props));\n};\n\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\";\n}\n/**\n * Locks the color mode to `light` without any way to change it.\n */\n\n\nvar LightMode = function LightMode(props) {\n  var context = React.useMemo(function () {\n    return {\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n    value: context\n  }, props));\n};\n\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\";\n}\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\n\n\nfunction useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return colorMode === \"dark\" ? dark : light;\n}\n\nfunction setScript(initialValue) {\n  var mql = window.matchMedia(\"(prefers-color-scheme: dark)\");\n  var systemPreference = mql.matches ? \"dark\" : \"light\";\n  var persistedPreference = systemPreference;\n\n  try {\n    persistedPreference = localStorage.getItem(\"chakra-ui-color-mode\");\n  } catch (error) {\n    console.log(\"Chakra UI: localStorage is not available. Color mode persistence might not work as expected\");\n  }\n\n  var colorMode;\n\n  if (persistedPreference) {\n    colorMode = persistedPreference;\n  } else if (initialValue === \"system\") {\n    colorMode = systemPreference;\n  } else {\n    colorMode = initialValue != null ? initialValue : systemPreference;\n  }\n\n  if (colorMode) {\n    /**\n     * Keep in sync with `root.set() {@file ./color-mode.utils.ts}\n     */\n    document.documentElement.style.setProperty(\"--chakra-ui-color-mode\", colorMode);\n    document.documentElement.setAttribute(\"data-theme\", colorMode);\n  }\n}\n/**\n * Script to add to the root of your application when using localStorage,\n * to help prevent flash of color mode that can happen during page load.\n */\n\n\nvar ColorModeScript = function ColorModeScript(props) {\n  var _props$initialColorMo = props.initialColorMode,\n      initialColorMode = _props$initialColorMo === void 0 ? \"light\" : _props$initialColorMo; // Runtime safeguard against invalid color mode values.\n\n  var validColorModeValues = [\"dark\", \"light\", \"system\"];\n\n  if (!validColorModeValues.includes(initialColorMode)) {\n    initialColorMode = \"light\";\n  }\n\n  var html = \"(\" + String(setScript) + \")('\" + initialColorMode + \"')\";\n  return /*#__PURE__*/React.createElement(\"script\", {\n    nonce: props.nonce,\n    dangerouslySetInnerHTML: {\n      __html: html\n    }\n  });\n};\n\nexport { ColorModeContext, ColorModeProvider, ColorModeScript, DarkMode, LightMode, cookieStorageManager, localStorageManager, setScript, storageKey, useColorMode, useColorModeValue };","map":{"version":3,"sources":["C:/kai/Cal/Fullstack/group13/frontend/frontend/node_modules/@chakra-ui/color-mode/dist/chakra-ui-color-mode.esm.js"],"names":["useEnvironment","noop","isBrowser","__DEV__","React","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","classNames","light","dark","mockBody","classList","add","remove","getBody","document","body","syncBodyClassName","isDark","getMediaQuery","query","mediaQueryList","window","matchMedia","undefined","media","matches","queries","getColorScheme","fallback","_getMediaQuery","addListener","fn","listener","addEventListener","removeEventListener","root","get","documentElement","style","getPropertyValue","dataset","theme","set","mode","setProperty","setAttribute","hasSupport","Storage","storageKey","localStorageManager","init","_value","localStorage","getItem","error","console","log","value","setItem","type","cookieStorageManager","cookies","match","RegExp","cookie","ColorModeContext","createContext","displayName","useColorMode","context","useContext","Error","ColorModeProvider","props","children","_props$options","options","useSystemColorMode","initialColorMode","_props$colorModeManag","colorModeManager","defaultColorMode","_React$useState","useState","colorMode","rawSetColorMode","_useEnvironment","useEffect","systemColorWithFallback","rootGet","colorManagerGet","setColorMode","useCallback","isListenerEvent","toggleColorMode","shouldUseSystemListener","removeListener","useMemo","createElement","Provider","DarkMode","LightMode","useColorModeValue","_useColorMode","setScript","initialValue","mql","systemPreference","persistedPreference","ColorModeScript","_props$initialColorMo","validColorModeValues","includes","html","String","nonce","dangerouslySetInnerHTML","__html"],"mappings":"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","sourcesContent":["import { useEnvironment } from '@chakra-ui/react-env';\nimport { noop, isBrowser, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar classNames = {\n  light: \"chakra-ui-light\",\n  dark: \"chakra-ui-dark\"\n};\n\n/**\n * SSR: Graceful fallback for the `body` element\n */\nvar mockBody = {\n  classList: {\n    add: noop,\n    remove: noop\n  }\n};\n\nvar getBody = function getBody(document) {\n  return isBrowser ? document.body : mockBody;\n};\n/**\n * Function to add/remove class from `body` based on color mode\n */\n\n\nfunction syncBodyClassName(isDark, document) {\n  var body = getBody(document);\n  body.classList.add(isDark ? classNames.dark : classNames.light);\n  body.classList.remove(isDark ? classNames.light : classNames.dark);\n}\n/**\n * Check if JS media query matches the query string passed\n */\n\nfunction getMediaQuery(query) {\n  var mediaQueryList = window.matchMedia == null ? void 0 : window.matchMedia(query);\n\n  if (!mediaQueryList) {\n    return undefined;\n  }\n\n  return !!mediaQueryList.media === mediaQueryList.matches;\n}\n\nvar queries = {\n  light: \"(prefers-color-scheme: light)\",\n  dark: \"(prefers-color-scheme: dark)\"\n};\n\nfunction getColorScheme(fallback) {\n  var _getMediaQuery;\n\n  var isDark = (_getMediaQuery = getMediaQuery(queries.dark)) != null ? _getMediaQuery : fallback === \"dark\";\n  return isDark ? \"dark\" : \"light\";\n}\n/**\n * Adds system os color mode listener, and run the callback\n * once preference changes\n */\n\nfunction addListener(fn) {\n  if (!(\"matchMedia\" in window)) {\n    return noop;\n  }\n\n  var mediaQueryList = window.matchMedia(queries.dark);\n\n  var listener = function listener() {\n    fn(mediaQueryList.matches ? \"dark\" : \"light\", true);\n  };\n\n  mediaQueryList.addEventListener(\"change\", listener);\n  return function () {\n    mediaQueryList.removeEventListener(\"change\", listener);\n  };\n}\nvar root = {\n  get: function get() {\n    return document.documentElement.style.getPropertyValue(\"--chakra-ui-color-mode\") || document.documentElement.dataset.theme;\n  },\n  set: function set(mode) {\n    if (isBrowser) {\n      /**\n       * @deprecated\n       * The CSS variable `--chakra-ui-color-mode` will be removed in the next major release\n       * Please use the `data-theme` attribute to determine the current color mode\n       */\n      document.documentElement.style.setProperty(\"--chakra-ui-color-mode\", mode);\n      document.documentElement.setAttribute(\"data-theme\", mode);\n    }\n  }\n};\n\nvar hasSupport = function hasSupport() {\n  return typeof Storage !== \"undefined\";\n};\n\nvar storageKey = \"chakra-ui-color-mode\";\n\n/**\n * Simple object to handle read-write to localStorage\n */\nvar localStorageManager = {\n  get: function get(init) {\n    if (!hasSupport()) return init;\n\n    try {\n      var _value = localStorage.getItem(storageKey);\n\n      return _value != null ? _value : init;\n    } catch (error) {\n      if (__DEV__) {\n        console.log(error);\n      }\n\n      return init;\n    }\n  },\n  set: function set(value) {\n    if (!hasSupport()) return;\n\n    try {\n      localStorage.setItem(storageKey, value);\n    } catch (error) {\n      if (__DEV__) {\n        console.log(error);\n      }\n    }\n  },\n  type: \"localStorage\"\n};\n/**\n * Simple object to handle read-write to cookies\n */\n\nvar cookieStorageManager = function cookieStorageManager(cookies) {\n  if (cookies === void 0) {\n    cookies = \"\";\n  }\n\n  return {\n    get: function get(init) {\n      var match = cookies.match(new RegExp(\"(^| )\" + storageKey + \"=([^;]+)\"));\n\n      if (match) {\n        return match[2];\n      }\n\n      return init;\n    },\n    set: function set(value) {\n      document.cookie = storageKey + \"=\" + value + \"; max-age=31536000; path=/\";\n    },\n    type: \"cookie\"\n  };\n};\n\nvar ColorModeContext = /*#__PURE__*/React.createContext({});\n\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\";\n}\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\n\n\nvar useColorMode = function useColorMode() {\n  var context = React.useContext(ColorModeContext);\n\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n\n  return context;\n};\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nfunction ColorModeProvider(props) {\n  var value = props.value,\n      children = props.children,\n      _props$options = props.options,\n      useSystemColorMode = _props$options.useSystemColorMode,\n      initialColorMode = _props$options.initialColorMode,\n      _props$colorModeManag = props.colorModeManager,\n      colorModeManager = _props$colorModeManag === void 0 ? localStorageManager : _props$colorModeManag;\n  var defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  /**\n   * Only attempt to retrieve if we're on the server. Else this will result\n   * in a hydration mismatch warning and partially invalid visuals.\n   *\n   * Else fallback safely to `theme.config.initialColormode` (default light)\n   */\n\n  var _React$useState = React.useState(colorModeManager.type === \"cookie\" ? colorModeManager.get(defaultColorMode) : defaultColorMode),\n      colorMode = _React$useState[0],\n      rawSetColorMode = _React$useState[1];\n\n  var _useEnvironment = useEnvironment(),\n      document = _useEnvironment.document;\n\n  React.useEffect(function () {\n    /**\n     * Since we cannot initially retrieve localStorage for the reasons mentioned\n     * above, do so after hydration.\n     *\n     * Priority:\n     * - if `useSystemColorMode` is true system-color will be used as default - initial\n     * colormode is the fallback if system color mode isn't resolved\n     *\n     * - if `--chakra-ui-color-mode` is defined through e.g. `ColorModeScript` this\n     * will be used\n     *\n     * - if `colorModeManager` = `localStorage` and a value is defined for\n     * `chakra-ui-color-mode` this will be used\n     *\n     * - if `initialColorMode` = `system` system-color will be used as default -\n     * initial colormode is the fallback if system color mode isn't resolved\n     *\n     * - if `initialColorMode` = `'light'|'dark'` the corresponding value will be used\n     */\n    if (isBrowser && colorModeManager.type === \"localStorage\") {\n      var systemColorWithFallback = getColorScheme(defaultColorMode);\n\n      if (useSystemColorMode) {\n        return rawSetColorMode(systemColorWithFallback);\n      }\n\n      var rootGet = root.get();\n      var colorManagerGet = colorModeManager.get();\n\n      if (rootGet) {\n        return rawSetColorMode(rootGet);\n      }\n\n      if (colorManagerGet) {\n        return rawSetColorMode(colorManagerGet);\n      }\n\n      if (initialColorMode === \"system\") {\n        return rawSetColorMode(systemColorWithFallback);\n      }\n\n      return rawSetColorMode(defaultColorMode);\n    }\n  }, [colorModeManager, useSystemColorMode, defaultColorMode, initialColorMode]);\n  React.useEffect(function () {\n    var isDark = colorMode === \"dark\";\n    syncBodyClassName(isDark, document);\n    root.set(isDark ? \"dark\" : \"light\");\n  }, [colorMode, document]);\n  var setColorMode = React.useCallback(function (value, isListenerEvent) {\n    if (isListenerEvent === void 0) {\n      isListenerEvent = false;\n    }\n\n    if (!isListenerEvent) {\n      colorModeManager.set(value);\n    } else if (colorModeManager.get() && !useSystemColorMode) return;\n\n    rawSetColorMode(value);\n  }, [colorModeManager, useSystemColorMode]);\n  var toggleColorMode = React.useCallback(function () {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\");\n  }, [colorMode, setColorMode]);\n  React.useEffect(function () {\n    var shouldUseSystemListener = useSystemColorMode || initialColorMode === \"system\";\n    var removeListener;\n\n    if (shouldUseSystemListener) {\n      removeListener = addListener(setColorMode);\n    }\n\n    return function () {\n      if (removeListener && shouldUseSystemListener) {\n        removeListener();\n      }\n    };\n  }, [setColorMode, useSystemColorMode, initialColorMode]); // presence of `value` indicates a controlled context\n\n  var context = React.useMemo(function () {\n    return {\n      colorMode: value != null ? value : colorMode,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode\n    };\n  }, [colorMode, setColorMode, toggleColorMode, value]);\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n    value: context\n  }, children);\n}\n\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\";\n}\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\n\n\nvar DarkMode = function DarkMode(props) {\n  var context = React.useMemo(function () {\n    return {\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n    value: context\n  }, props));\n};\n\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\";\n}\n/**\n * Locks the color mode to `light` without any way to change it.\n */\n\n\nvar LightMode = function LightMode(props) {\n  var context = React.useMemo(function () {\n    return {\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n    value: context\n  }, props));\n};\n\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\";\n}\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\n\n\nfunction useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return colorMode === \"dark\" ? dark : light;\n}\n\nfunction setScript(initialValue) {\n  var mql = window.matchMedia(\"(prefers-color-scheme: dark)\");\n  var systemPreference = mql.matches ? \"dark\" : \"light\";\n  var persistedPreference = systemPreference;\n\n  try {\n    persistedPreference = localStorage.getItem(\"chakra-ui-color-mode\");\n  } catch (error) {\n    console.log(\"Chakra UI: localStorage is not available. Color mode persistence might not work as expected\");\n  }\n\n  var colorMode;\n\n  if (persistedPreference) {\n    colorMode = persistedPreference;\n  } else if (initialValue === \"system\") {\n    colorMode = systemPreference;\n  } else {\n    colorMode = initialValue != null ? initialValue : systemPreference;\n  }\n\n  if (colorMode) {\n    /**\n     * Keep in sync with `root.set() {@file ./color-mode.utils.ts}\n     */\n    document.documentElement.style.setProperty(\"--chakra-ui-color-mode\", colorMode);\n    document.documentElement.setAttribute(\"data-theme\", colorMode);\n  }\n}\n\n/**\n * Script to add to the root of your application when using localStorage,\n * to help prevent flash of color mode that can happen during page load.\n */\nvar ColorModeScript = function ColorModeScript(props) {\n  var _props$initialColorMo = props.initialColorMode,\n      initialColorMode = _props$initialColorMo === void 0 ? \"light\" : _props$initialColorMo; // Runtime safeguard against invalid color mode values.\n\n  var validColorModeValues = [\"dark\", \"light\", \"system\"];\n\n  if (!validColorModeValues.includes(initialColorMode)) {\n    initialColorMode = \"light\";\n  }\n\n  var html = \"(\" + String(setScript) + \")('\" + initialColorMode + \"')\";\n  return /*#__PURE__*/React.createElement(\"script\", {\n    nonce: props.nonce,\n    dangerouslySetInnerHTML: {\n      __html: html\n    }\n  });\n};\n\nexport { ColorModeContext, ColorModeProvider, ColorModeScript, DarkMode, LightMode, cookieStorageManager, localStorageManager, setScript, storageKey, useColorMode, useColorModeValue };\n"]},"metadata":{},"sourceType":"module"}