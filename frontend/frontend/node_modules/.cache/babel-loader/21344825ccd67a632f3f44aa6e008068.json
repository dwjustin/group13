{"ast":null,"code":"import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nvar NodeStack =\n/** @class */\nfunction () {\n  function NodeStack() {\n    this.members = [];\n  }\n\n  NodeStack.prototype.add = function (node) {\n    addUniqueItem(this.members, node);\n    node.scheduleRender();\n  };\n\n  NodeStack.prototype.remove = function (node) {\n    removeItem(this.members, node);\n\n    if (node === this.prevLead) {\n      this.prevLead = undefined;\n    }\n\n    if (node === this.lead) {\n      var prevLead = this.members[this.members.length - 1];\n\n      if (prevLead) {\n        this.promote(prevLead);\n      }\n    }\n  };\n\n  NodeStack.prototype.relegate = function (node) {\n    var indexOfNode = this.members.findIndex(function (member) {\n      return node === member;\n    });\n    if (indexOfNode === 0) return false;\n    /**\n     * Find the next projection node that is present\n     */\n\n    var prevLead;\n\n    for (var i = indexOfNode; i >= 0; i--) {\n      var member = this.members[i];\n\n      if (member.isPresent !== false) {\n        prevLead = member;\n        break;\n      }\n    }\n\n    if (prevLead) {\n      this.promote(prevLead);\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  NodeStack.prototype.promote = function (node, preserveFollowOpacity) {\n    var _a;\n\n    var prevLead = this.lead;\n    if (node === prevLead) return;\n    this.prevLead = prevLead;\n    this.lead = node;\n    node.show();\n\n    if (prevLead) {\n      prevLead.instance && prevLead.scheduleRender();\n      node.scheduleRender();\n      node.resumeFrom = prevLead;\n\n      if (preserveFollowOpacity) {\n        node.resumeFrom.preserveOpacity = true;\n      }\n\n      if (prevLead.snapshot) {\n        node.snapshot = prevLead.snapshot;\n        node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;\n        node.snapshot.isShared = true;\n      }\n\n      if ((_a = node.root) === null || _a === void 0 ? void 0 : _a.isUpdating) {\n        node.isLayoutDirty = true;\n      }\n\n      var crossfade = node.options.crossfade;\n\n      if (crossfade === false) {\n        prevLead.hide();\n      }\n      /**\n       * TODO:\n       *   - Test border radius when previous node was deleted\n       *   - boxShadow mixing\n       *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n       *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n       *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n       * ---\n       *   - Crossfade opacity of root nodes\n       *   - layoutId changes after animation\n       *   - layoutId changes mid animation\n       */\n\n    }\n  };\n\n  NodeStack.prototype.exitAnimationComplete = function () {\n    this.members.forEach(function (node) {\n      var _a, _b, _c, _d, _e;\n\n      (_b = (_a = node.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n      (_e = (_c = node.resumingFrom) === null || _c === void 0 ? void 0 : (_d = _c.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d);\n    });\n  };\n\n  NodeStack.prototype.scheduleRender = function () {\n    this.members.forEach(function (node) {\n      node.instance && node.scheduleRender(false);\n    });\n  };\n  /**\n   * Clear any leads that have been removed this render to prevent them from being\n   * used in future animations and to prevent memory leaks\n   */\n\n\n  NodeStack.prototype.removeLeadSnapshot = function () {\n    if (this.lead && this.lead.snapshot) {\n      this.lead.snapshot = undefined;\n    }\n  };\n\n  return NodeStack;\n}();\n\nexport { NodeStack };","map":{"version":3,"sources":["/Users/aditummala/Desktop/group13-1/frontend/frontend/node_modules/framer-motion/dist/es/projection/shared/stack.mjs"],"names":["addUniqueItem","removeItem","NodeStack","members","prototype","add","node","scheduleRender","remove","prevLead","undefined","lead","length","promote","relegate","indexOfNode","findIndex","member","i","isPresent","preserveFollowOpacity","_a","show","instance","resumeFrom","preserveOpacity","snapshot","latestValues","animationValues","isShared","root","isUpdating","isLayoutDirty","crossfade","options","hide","exitAnimationComplete","forEach","_b","_c","_d","_e","onExitComplete","call","resumingFrom","removeLeadSnapshot"],"mappings":"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","sourcesContent":["import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nvar NodeStack = /** @class */ (function () {\n    function NodeStack() {\n        this.members = [];\n    }\n    NodeStack.prototype.add = function (node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    };\n    NodeStack.prototype.remove = function (node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            var prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    };\n    NodeStack.prototype.relegate = function (node) {\n        var indexOfNode = this.members.findIndex(function (member) { return node === member; });\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        var prevLead;\n        for (var i = indexOfNode; i >= 0; i--) {\n            var member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    NodeStack.prototype.promote = function (node, preserveFollowOpacity) {\n        var _a;\n        var prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n                node.snapshot.isShared = true;\n            }\n            if ((_a = node.root) === null || _a === void 0 ? void 0 : _a.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            var crossfade = node.options.crossfade;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    };\n    NodeStack.prototype.exitAnimationComplete = function () {\n        this.members.forEach(function (node) {\n            var _a, _b, _c, _d, _e;\n            (_b = (_a = node.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n            (_e = (_c = node.resumingFrom) === null || _c === void 0 ? void 0 : (_d = _c.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d);\n        });\n    };\n    NodeStack.prototype.scheduleRender = function () {\n        this.members.forEach(function (node) {\n            node.instance && node.scheduleRender(false);\n        });\n    };\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    NodeStack.prototype.removeLeadSnapshot = function () {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    };\n    return NodeStack;\n}());\n\nexport { NodeStack };\n"]},"metadata":{},"sourceType":"module"}