{"ast":null,"code":"import { __read } from 'tslib';\nimport { useState, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs'; // Does this device prefer reduced motion? Returns `null` server-side.\n\nvar prefersReducedMotion = {\n  current: null\n};\nvar hasDetected = false;\n\nfunction initPrefersReducedMotion() {\n  hasDetected = true;\n  if (typeof window === \"undefined\") return;\n\n  if (window.matchMedia) {\n    var motionMediaQuery_1 = window.matchMedia(\"(prefers-reduced-motion)\");\n\n    var setReducedMotionPreferences = function () {\n      return prefersReducedMotion.current = motionMediaQuery_1.matches;\n    };\n\n    motionMediaQuery_1.addListener(setReducedMotionPreferences);\n    setReducedMotionPreferences();\n  } else {\n    prefersReducedMotion.current = false;\n  }\n}\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */\n\n\nfunction useReducedMotion() {\n  /**\n   * Lazy initialisation of prefersReducedMotion\n   */\n  !hasDetected && initPrefersReducedMotion();\n\n  var _a = __read(useState(prefersReducedMotion.current), 1),\n      shouldReduceMotion = _a[0];\n  /**\n   * TODO See if people miss automatically updating shouldReduceMotion setting\n   */\n\n\n  return shouldReduceMotion;\n}\n\nfunction useReducedMotionConfig() {\n  var reducedMotionPreference = useReducedMotion();\n  var reducedMotion = useContext(MotionConfigContext).reducedMotion;\n\n  if (reducedMotion === \"never\") {\n    return false;\n  } else if (reducedMotion === \"always\") {\n    return true;\n  } else {\n    return reducedMotionPreference;\n  }\n}\n\nexport { useReducedMotion, useReducedMotionConfig };","map":{"version":3,"sources":["/Users/aditummala/Desktop/group13-1/frontend/frontend/node_modules/framer-motion/dist/es/utils/use-reduced-motion.mjs"],"names":["__read","useState","useContext","MotionConfigContext","prefersReducedMotion","current","hasDetected","initPrefersReducedMotion","window","matchMedia","motionMediaQuery_1","setReducedMotionPreferences","matches","addListener","useReducedMotion","_a","shouldReduceMotion","useReducedMotionConfig","reducedMotionPreference","reducedMotion"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AACA,SAASC,mBAAT,QAAoC,oCAApC,C,CAEA;;AACA,IAAIC,oBAAoB,GAAG;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAA3B;AACA,IAAIC,WAAW,GAAG,KAAlB;;AACA,SAASC,wBAAT,GAAoC;AAChCD,EAAAA,WAAW,GAAG,IAAd;AACA,MAAI,OAAOE,MAAP,KAAkB,WAAtB,EACI;;AACJ,MAAIA,MAAM,CAACC,UAAX,EAAuB;AACnB,QAAIC,kBAAkB,GAAGF,MAAM,CAACC,UAAP,CAAkB,0BAAlB,CAAzB;;AACA,QAAIE,2BAA2B,GAAG,YAAY;AAC1C,aAAQP,oBAAoB,CAACC,OAArB,GAA+BK,kBAAkB,CAACE,OAA1D;AACH,KAFD;;AAGAF,IAAAA,kBAAkB,CAACG,WAAnB,CAA+BF,2BAA/B;AACAA,IAAAA,2BAA2B;AAC9B,GAPD,MAQK;AACDP,IAAAA,oBAAoB,CAACC,OAArB,GAA+B,KAA/B;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,gBAAT,GAA4B;AACxB;AACJ;AACA;AACI,GAACR,WAAD,IAAgBC,wBAAwB,EAAxC;;AACA,MAAIQ,EAAE,GAAGf,MAAM,CAACC,QAAQ,CAACG,oBAAoB,CAACC,OAAtB,CAAT,EAAyC,CAAzC,CAAf;AAAA,MAA4DW,kBAAkB,GAAGD,EAAE,CAAC,CAAD,CAAnF;AACA;AACJ;AACA;;;AACI,SAAOC,kBAAP;AACH;;AACD,SAASC,sBAAT,GAAkC;AAC9B,MAAIC,uBAAuB,GAAGJ,gBAAgB,EAA9C;AACA,MAAIK,aAAa,GAAGjB,UAAU,CAACC,mBAAD,CAAV,CAAgCgB,aAApD;;AACA,MAAIA,aAAa,KAAK,OAAtB,EAA+B;AAC3B,WAAO,KAAP;AACH,GAFD,MAGK,IAAIA,aAAa,KAAK,QAAtB,EAAgC;AACjC,WAAO,IAAP;AACH,GAFI,MAGA;AACD,WAAOD,uBAAP;AACH;AACJ;;AAED,SAASJ,gBAAT,EAA2BG,sBAA3B","sourcesContent":["import { __read } from 'tslib';\nimport { useState, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\n\n// Does this device prefer reduced motion? Returns `null` server-side.\nvar prefersReducedMotion = { current: null };\nvar hasDetected = false;\nfunction initPrefersReducedMotion() {\n    hasDetected = true;\n    if (typeof window === \"undefined\")\n        return;\n    if (window.matchMedia) {\n        var motionMediaQuery_1 = window.matchMedia(\"(prefers-reduced-motion)\");\n        var setReducedMotionPreferences = function () {\n            return (prefersReducedMotion.current = motionMediaQuery_1.matches);\n        };\n        motionMediaQuery_1.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */\nfunction useReducedMotion() {\n    /**\n     * Lazy initialisation of prefersReducedMotion\n     */\n    !hasDetected && initPrefersReducedMotion();\n    var _a = __read(useState(prefersReducedMotion.current), 1), shouldReduceMotion = _a[0];\n    /**\n     * TODO See if people miss automatically updating shouldReduceMotion setting\n     */\n    return shouldReduceMotion;\n}\nfunction useReducedMotionConfig() {\n    var reducedMotionPreference = useReducedMotion();\n    var reducedMotion = useContext(MotionConfigContext).reducedMotion;\n    if (reducedMotion === \"never\") {\n        return false;\n    }\n    else if (reducedMotion === \"always\") {\n        return true;\n    }\n    else {\n        return reducedMotionPreference;\n    }\n}\n\nexport { useReducedMotion, useReducedMotionConfig };\n"]},"metadata":{},"sourceType":"module"}