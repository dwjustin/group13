{"ast":null,"code":"import { __rest } from 'tslib';\nimport { findSpring, calcAngularFreq } from '../utils/find-spring.mjs';\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\n\nfunction isSpringType(options, keys) {\n  return keys.some(key => options[key] !== undefined);\n}\n\nfunction getSpringOptions(options) {\n  let springOptions = Object.assign({\n    velocity: 0.0,\n    stiffness: 100,\n    damping: 10,\n    mass: 1.0,\n    isResolvedFromDuration: false\n  }, options);\n\n  if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {\n    const derived = findSpring(options);\n    springOptions = Object.assign(Object.assign(Object.assign({}, springOptions), derived), {\n      velocity: 0.0,\n      mass: 1.0\n    });\n    springOptions.isResolvedFromDuration = true;\n  }\n\n  return springOptions;\n}\n\nfunction spring(_a) {\n  var {\n    from = 0.0,\n    to = 1.0,\n    restSpeed = 2,\n    restDelta\n  } = _a,\n      options = __rest(_a, [\"from\", \"to\", \"restSpeed\", \"restDelta\"]);\n\n  const state = {\n    done: false,\n    value: from\n  };\n  let {\n    stiffness,\n    damping,\n    mass,\n    velocity,\n    duration,\n    isResolvedFromDuration\n  } = getSpringOptions(options);\n  let resolveSpring = zero;\n  let resolveVelocity = zero;\n\n  function createSpring() {\n    const initialVelocity = velocity ? -(velocity / 1000) : 0.0;\n    const initialDelta = to - from;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n\n    if (restDelta === undefined) {\n      restDelta = Math.min(Math.abs(to - from) / 100, 0.4);\n    }\n\n    if (dampingRatio < 1) {\n      const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n\n      resolveSpring = t => {\n        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n        return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));\n      };\n\n      resolveVelocity = t => {\n        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n        return dampingRatio * undampedAngularFreq * envelope * (Math.sin(angularFreq * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq + initialDelta * Math.cos(angularFreq * t)) - envelope * (Math.cos(angularFreq * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) - angularFreq * initialDelta * Math.sin(angularFreq * t));\n      };\n    } else if (dampingRatio === 1) {\n      resolveSpring = t => to - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);\n    } else {\n      const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n\n      resolveSpring = t => {\n        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n        const freqForT = Math.min(dampedAngularFreq * t, 300);\n        return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;\n      };\n    }\n  }\n\n  createSpring();\n  return {\n    next: t => {\n      const current = resolveSpring(t);\n\n      if (!isResolvedFromDuration) {\n        const currentVelocity = resolveVelocity(t) * 1000;\n        const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n        const isBelowDisplacementThreshold = Math.abs(to - current) <= restDelta;\n        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n      } else {\n        state.done = t >= duration;\n      }\n\n      state.value = state.done ? to : current;\n      return state;\n    },\n    flipTarget: () => {\n      velocity = -velocity;\n      [from, to] = [to, from];\n      createSpring();\n    }\n  };\n}\n\nspring.needsInterpolation = (a, b) => typeof a === \"string\" || typeof b === \"string\";\n\nconst zero = _t => 0;\n\nexport { spring };","map":{"version":3,"sources":["C:/kai/Cal/Fullstack/group13/frontend/frontend/node_modules/popmotion/dist/es/animations/generators/spring.mjs"],"names":["__rest","findSpring","calcAngularFreq","durationKeys","physicsKeys","isSpringType","options","keys","some","key","undefined","getSpringOptions","springOptions","Object","assign","velocity","stiffness","damping","mass","isResolvedFromDuration","derived","spring","_a","from","to","restSpeed","restDelta","state","done","value","duration","resolveSpring","zero","resolveVelocity","createSpring","initialVelocity","initialDelta","dampingRatio","Math","sqrt","undampedAngularFreq","min","abs","angularFreq","t","envelope","exp","sin","cos","dampedAngularFreq","freqForT","sinh","cosh","next","current","currentVelocity","isBelowVelocityThreshold","isBelowDisplacementThreshold","flipTarget","needsInterpolation","a","b","_t"],"mappings":"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","sourcesContent":["import { __rest } from 'tslib';\nimport { findSpring, calcAngularFreq } from '../utils/find-spring.mjs';\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = Object.assign({ velocity: 0.0, stiffness: 100, damping: 10, mass: 1.0, isResolvedFromDuration: false }, options);\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = Object.assign(Object.assign(Object.assign({}, springOptions), derived), { velocity: 0.0, mass: 1.0 });\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nfunction spring(_a) {\n    var { from = 0.0, to = 1.0, restSpeed = 2, restDelta } = _a, options = __rest(_a, [\"from\", \"to\", \"restSpeed\", \"restDelta\"]);\n    const state = { done: false, value: from };\n    let { stiffness, damping, mass, velocity, duration, isResolvedFromDuration, } = getSpringOptions(options);\n    let resolveSpring = zero;\n    let resolveVelocity = zero;\n    function createSpring() {\n        const initialVelocity = velocity ? -(velocity / 1000) : 0.0;\n        const initialDelta = to - from;\n        const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n        const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n        if (restDelta === undefined) {\n            restDelta = Math.min(Math.abs(to - from) / 100, 0.4);\n        }\n        if (dampingRatio < 1) {\n            const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                return (to -\n                    envelope *\n                        (((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) /\n                            angularFreq) *\n                            Math.sin(angularFreq * t) +\n                            initialDelta * Math.cos(angularFreq * t)));\n            };\n            resolveVelocity = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                return (dampingRatio *\n                    undampedAngularFreq *\n                    envelope *\n                    ((Math.sin(angularFreq * t) *\n                        (initialVelocity +\n                            dampingRatio *\n                                undampedAngularFreq *\n                                initialDelta)) /\n                        angularFreq +\n                        initialDelta * Math.cos(angularFreq * t)) -\n                    envelope *\n                        (Math.cos(angularFreq * t) *\n                            (initialVelocity +\n                                dampingRatio *\n                                    undampedAngularFreq *\n                                    initialDelta) -\n                            angularFreq *\n                                initialDelta *\n                                Math.sin(angularFreq * t)));\n            };\n        }\n        else if (dampingRatio === 1) {\n            resolveSpring = (t) => to -\n                Math.exp(-undampedAngularFreq * t) *\n                    (initialDelta +\n                        (initialVelocity + undampedAngularFreq * initialDelta) *\n                            t);\n        }\n        else {\n            const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                const freqForT = Math.min(dampedAngularFreq * t, 300);\n                return (to -\n                    (envelope *\n                        ((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) *\n                            Math.sinh(freqForT) +\n                            dampedAngularFreq *\n                                initialDelta *\n                                Math.cosh(freqForT))) /\n                        dampedAngularFreq);\n            };\n        }\n    }\n    createSpring();\n    return {\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                const currentVelocity = resolveVelocity(t) * 1000;\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(to - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? to : current;\n            return state;\n        },\n        flipTarget: () => {\n            velocity = -velocity;\n            [from, to] = [to, from];\n            createSpring();\n        },\n    };\n}\nspring.needsInterpolation = (a, b) => typeof a === \"string\" || typeof b === \"string\";\nconst zero = (_t) => 0;\n\nexport { spring };\n"]},"metadata":{},"sourceType":"module"}